name: TrafficSim CI/CD Workflow

on:
  push:
    branches:
      - project-setup # for local testing purposes
  pull_request:
    branches:
      - project-setup

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]  # Cross-platform setup
    
    steps:
    # Step 1: Check out the repository
    - name: Checkout code
      uses: actions/checkout@v2
    
    # Step 2: Set up JDK 21
    - name: Set up JDK 21
      uses: actions/setup-java@v2
      with:
        java-version: '21'
        distribution: 'temurin'

    # Step 3: Cache Maven dependencies
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    # Step 5: Get project version from pom.xml
    - name: Get project version from pom.xml
      id: get_version
      run: |
        if ($Env:RUNNER_OS -eq "Windows") {
            $VERSION = & mvn help:evaluate -Dexpression=project.version -q -DforceStdout
            Write-Host "VERSION=$VERSION"
            echo "VERSION=$VERSION" >> $GITHUB_ENV
        } else {
            VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
            echo "VERSION=$VERSION" >> $GITHUB_ENV
        }
    
    # Step 5: Compile, test, and package the application
    - name: Build, test, and package with Maven
      run: mvn clean package --batch-mode
    
    # Step 6: Bundle into a native installer
    - name: Package application as self-contained installer
      run: |
        if [ $RUNNER_OS == 'Linux' ]; then
          jpackage --input target/ --name TrafficSim --main-jar trafficsim-${{ steps.get_version.outputs.version }}.jar --main-class com.example.App --type deb
        elif [ $RUNNER_OS == 'Windows' ]; then
          jpackage --input target/ --name TrafficSim --main-jar trafficsim-${{ steps.get_version.outputs.version }}.jar --main-class com.example.App --type exe
        elif [ $RUNNER_OS == 'macOS' ]; then
          jpackage --input target/ --name TrafficSim --main-jar trafficsim-${{ steps.get_version.outputs.version }}.jar --main-class com.example.App --type dmg
        fi
            
    # Step 7: Upload Installer as Artifact
    - name: Upload Installer as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: my-app-installer
        path: |
          target/*.exe  # For Windows
          target/*.deb  # For Linux
          target/*.dmg  # For macOS
